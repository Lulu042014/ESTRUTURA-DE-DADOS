//1) Escreva um programa que receba 10 valores fornecidos pelo usuário e os armazene em um vetor.
Em seguida, o programa deve retornar o somatório dos valores em questão.

#include <stdio.h>

int main() {
    int vetor[10];
    int soma = 0;

    // Recebendo 10 valores do usuário
    printf("Digite 10 valores:\n");
    for (int i = 0; i < 10; i++) {
        printf("Valor %d: ", i + 1);
        scanf("%d", &vetor[i]);
        soma += vetor[i];
    }

    // Exibindo o somatório dos valores
    printf("Somatório dos valores: %d\n", soma);

    return 0;
}

//2) Escreva um programa que retorne os elementos duplicados de um vetor.

#include <stdio.h>

int main() {
    int n, i, j;
    int temDuplicado = 0;

    // Solicitando o tamanho do vetor
    printf("Digite o tamanho do vetor: ");
    scanf("%d", &n);

    // Declarando o vetor
    int vetor[n];

    // Recebendo os elementos do usuário
    printf("Digite %d valores:\n", n);
    for (i = 0; i < n; i++) {
        printf("Elemento %d: ", i + 1);
        scanf("%d", &vetor[i]);
    }

    // Encontrando e exibindo os elementos duplicados
    printf("Elementos duplicados:\n");
    for (i = 0; i < n; i++) {
        for (j = i + 1; j < n; j++) {
            if (vetor[i] == vetor[j]) {
                printf("%d\n", vetor[i]);
                temDuplicado = 1;
                break;
            }
        }
    }

    // Caso não haja duplicados
    if (!temDuplicado) {
        printf("Nenhum elemento duplicado encontrado.\n");
    }

    return 0;
}


//3) Escreva um programa para encontrar a frequência de cada elemento armazenado em um vetor.

#include <stdio.h>

int main() {
    int n, i, j, count;
    printf("Digite o tamanho do vetor: ");
    scanf("%d", &n);

    int vetor[n];
    int freq[n];

    printf("Digite %d valores:\n", n);
    for (i = 0; i < n; i++) {
        printf("Valor %d: ", i + 1);
        scanf("%d", &vetor[i]);
        freq[i] = -1;
    }

    // Contando a frequência dos elementos
    for (i = 0; i < n; i++) {
        count = 1;
        for (j = i + 1; j < n; j++) {
            if (vetor[i] == vetor[j]) {
                count++;
                freq[j] = 0; // Marca o elemento como contado
            }
        }
        if (freq[i] != 0) {
            freq[i] = count;
        }
    }

    // Exibindo a frequência dos elementos
    printf("Frequência dos elementos:\n");
    for (i = 0; i < n; i++) {
        if (freq[i] != 0) {
            printf("%d aparece %d vezes\n", vetor[i], freq[i]);
        }
    }

    return 0;
}


//4) Escreva um programa que receba 8 valores e armazene tais valores em um vetor. Em seguida o
programa deve retornar o coeficiente de variação (cv), conforme a seguinte regra:

#include <stdio.h>
#include <math.h>

int main() {
    double vetor[8], soma = 0.0, media, soma_desvios = 0.0, desvio_padrao, cv;

    // Recebendo 8 valores do usuário
    printf("Digite 8 valores:\n");
    for (int i = 0; i < 8; i++) {
        printf("Valor %d: ", i + 1);
        scanf("%lf", &vetor[i]);
        soma += vetor[i];
    }

    // Calculando a média
    media = soma / 8;

    // Calculando o desvio padrão
    for (int i = 0; i < 8; i++) {
        soma_desvios += pow(vetor[i] - media, 2);
    }
    desvio_padrao = sqrt(soma_desvios / 8);

    // Calculando o coeficiente de variação (cv)
    cv = desvio_padrao / media;

    // Exibindo os resultados
    printf("\nMédia: %.2lf\n", media);
    printf("Desvio Padrão: %.2lf\n", desvio_padrao);
    printf("Coeficiente de Variação (cv): %.4lf\n", cv);

    // Classificando o coeficiente de variação
    if (cv < 0.1) {
        printf("Classificação: Baixo\n");
    } else if (cv < 0.2) {
        printf("Classificação: Médio\n");
    } else if (cv < 0.3) {
        printf("Classificação: Alto\n");
    } else {
        printf("Classificação: Muito Alto\n");
    }

    return 0;
}

//5) Implemente um programa que retorne a seguinte soma:

#include <stdio.h>

int main() {
    int N;
    double soma = 0.0;

    // Recebendo o valor de N do usuário
    printf("Digite um número inteiro positivo N: ");
    scanf("%d", &N);

    // Verificando se N é positivo
    if (N <= 0) {
        printf("Por favor, insira um número inteiro positivo.\n");
        return 1;
    }

    // Calculando a soma da série
    for (int i = 1; i <= N; i++) {
        soma += 1.0 / i;
    }

    // Exibindo o resultado
    printf("A soma da série até 1/%d é: %.6lf\n", N, soma);

    return 0;
}

//6) Escreva um programa para adicionar dois números do tipo float usando o conceito de ponteiro e
função.

#include <stdio.h>

// Função para adicionar dois números float usando ponteiros
void adicionar(float *num1, float *num2, float *resultado) {
    *resultado = *num1 + *num2;
}

int main() {
    float a, b, soma;

    // Recebendo os valores do usuário
    printf("Digite o primeiro número: ");
    scanf("%f", &a);
    printf("Digite o segundo número: ");
    scanf("%f", &b);

    // Chamando a função para somar os dois números
    adicionar(&a, &b, &soma);

    // Exibindo o resultado da soma
    printf("A soma de %.2f e %.2f é: %.2f\n", a, b, soma);

    return 0;
}

//7) Escreva um programa que retorne as seguinte operações para as matrizes abaixo (Se for
possível).

#include <stdio.h>

// Função para imprimir uma matriz
void imprimirMatriz(int linhas, int colunas, int matriz[linhas][colunas]) {
    for (int i = 0; i < linhas; i++) {
        for (int j = 0; j < colunas; j++) {
            printf("%4d ", matriz[i][j]);
        }
        printf("\n");
    }
    printf("\n");
}

// Função para somar duas matrizes (A + B)
void somarMatrizes(int A[2][3], int B[2][3], int resultado[2][3]) {
    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 3; j++) {
            resultado[i][j] = A[i][j] + B[i][j];
        }
    }
}

// Função para multiplicar duas matrizes (A * C)
void multiplicarMatrizes(int linhasA, int colunasA, int A[linhasA][colunasA],
                         int colunasB, int B[colunasA][colunasB], int resultado[linhasA][colunasB]) {
    for (int i = 0; i < linhasA; i++) {
        for (int j = 0; j < colunasB; j++) {
            resultado[i][j] = 0;
            for (int k = 0; k < colunasA; k++) {
                resultado[i][j] += A[i][k] * B[k][j];
            }
        }
    }
}

// Função para multiplicar um vetor por uma matriz (D * A)
void multiplicarVetorMatriz(int vetor[1][2], int matriz[2][3], int resultado[1][3]) {
    for (int i = 0; i < 3; i++) {
        resultado[0][i] = 0;
        for (int j = 0; j < 2; j++) {
            resultado[0][i] += vetor[0][j] * matriz[j][i];
        }
    }
}

// Função para inverter os sinais de uma matriz (-A ou -D)
void inverterSinais(int linhas, int colunas, int matriz[linhas][colunas], int resultado[linhas][colunas]) {
    for (int i = 0; i < linhas; i++) {
        for (int j = 0; j < colunas; j++) {
            resultado[i][j] = -matriz[i][j];
        }
    }
}

int main() {
    // Matrizes fornecidas
    int A[2][3] = {{1, 2, 3}, {2, 1, -1}};
    int B[2][3] = {{-2, 0, 1}, {3, 0, 1}};
    int C[3][1] = {{-1}, {2}, {4}};
    int D[1][2] = {{2, -1}};

    // Resultados das operações
    int resultado[2][3];
    int resultadoMultiplicacao[2][1];
    int resultadoVetorMatriz[1][3];

    // a) A + B
    printf("a) A + B:\n");
    somarMatrizes(A, B, resultado);
    imprimirMatriz(2, 3, resultado);

    // b) A * C
    printf("b) A * C:\n");
    multiplicarMatrizes(2, 3, A, 1, C, resultadoMultiplicacao);
    imprimirMatriz(2, 1, resultadoMultiplicacao);

    // c) B * C
    printf("c) B * C:\n");
    multiplicarMatrizes(2, 3, B, 1, C, resultadoMultiplicacao);
    imprimirMatriz(2, 1, resultadoMultiplicacao);

    // e) D * A
    printf("e) D * A:\n");
    multiplicarVetorMatriz(D, A, resultadoVetorMatriz);
    imprimirMatriz(1, 3, resultadoVetorMatriz);

    // g) -A
    printf("g) -A:\n");
    inverterSinais(2, 3, A, resultado);
    imprimirMatriz(2, 3, resultado);

    // h) -D
    printf("h) -D:\n");
    int resultadoD[1][2];
    inverterSinais(1, 2, D, resultadoD);
    imprimirMatriz(1, 2, resultadoD);

    return 0;
}

//8) Escreva um programa para armazenar n elementos em um vetor e imprimir os elementos em
questão usando o conceito de ponteiro.

#include <stdio.h>
#include <stdlib.h>

int main() {
    int n;
    printf("Digite o número de elementos: ");
    scanf("%d", &n);

    // Alocação dinâmica para o vetor
    int *vetor = (int *)malloc(n * sizeof(int));

    // Verifica se a alocação de memória foi bem-sucedida
    if (vetor == NULL) {
        printf("Falha na alocação de memória.\n");
        return 1;
    }

    // Recebendo os elementos do usuário
    printf("Digite %d elementos:\n", n);
    for (int i = 0; i < n; i++) {
        printf("Elemento %d: ", i + 1);
        scanf("%d", (vetor + i));
    }

    // Imprimindo os elementos usando ponteiros
    printf("Os elementos armazenados são:\n");
    for (int i = 0; i < n; i++) {
        printf("Elemento %d: %d\n", i + 1, *(vetor + i));
    }

    // Liberando a memória alocada
    free(vetor);

    return 0;
}

//9) Escreva um programa para encontrar o fatorial de um determinado número usando ponteiros.

#include <stdio.h>

// Função para calcular o fatorial usando ponteiros
void calcularFatorial(int *num, unsigned long long *fatorial) {
    *fatorial = 1;
    for (int i = 1; i <= *num; i++) {
        *fatorial *= i;
    }
}

int main() {
    int numero;
    unsigned long long fatorial;

    // Solicitando o número ao usuário
    printf("Digite um número inteiro não negativo: ");
    scanf("%d", &numero);

    // Verificando se o número é não negativo
    if (numero < 0) {
        printf("Número inválido! Fatorial não está definido para números negativos.\n");
        return 1;
    }

    // Chamando a função para calcular o fatorial
    calcularFatorial(&numero, &fatorial);

    // Exibindo o resultado
    printf("O fatorial de %d é: %llu\n", numero, fatorial);

    return 0;
}

//10) Escreva um programa em C para imprimir as letras do alfabeto usando um ponteiro.

#include <stdio.h>

int main() {
    char alfabeto[26];
    char *ptr = alfabeto;

    // Preenchendo o vetor com as letras do alfabeto
    for (int i = 0; i < 26; i++) {
        *(ptr + i) = 'A' + i;
    }

    // Imprimindo as letras do alfabeto usando o ponteiro
    printf("Letras do alfabeto:\n");
    for (int i = 0; i < 26; i++) {
        printf("%c ", *(ptr + i));
    }
    printf("\n");

    return 0;
}
